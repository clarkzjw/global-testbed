# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common import leotest_pb2 as common_dot_leotest__pb2


class LeotestOrchestratorStub(object):
    """The main gRPC service that runs in the orchestrator. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.report_heartbeat = channel.unary_unary(
                '/unary.LeotestOrchestrator/report_heartbeat',
                request_serializer=common_dot_leotest__pb2.message_heartbeat.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_heartbeat_response.FromString,
                )
        self.update_global_config = channel.unary_unary(
                '/unary.LeotestOrchestrator/update_global_config',
                request_serializer=common_dot_leotest__pb2.message_update_global_config.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_update_global_config_response.FromString,
                )
        self.get_global_config = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_global_config',
                request_serializer=common_dot_leotest__pb2.message_get_global_config.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_global_config_response.FromString,
                )
        self.register_user = channel.unary_unary(
                '/unary.LeotestOrchestrator/register_user',
                request_serializer=common_dot_leotest__pb2.message_register_user.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_register_user_response.FromString,
                )
        self.get_user = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_user',
                request_serializer=common_dot_leotest__pb2.message_get_user.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_user_response.FromString,
                )
        self.modify_user = channel.unary_unary(
                '/unary.LeotestOrchestrator/modify_user',
                request_serializer=common_dot_leotest__pb2.message_modify_user.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_modify_user_response.FromString,
                )
        self.delete_user = channel.unary_unary(
                '/unary.LeotestOrchestrator/delete_user',
                request_serializer=common_dot_leotest__pb2.message_delete_user.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_delete_user_response.FromString,
                )
        self.schedule_job = channel.unary_unary(
                '/unary.LeotestOrchestrator/schedule_job',
                request_serializer=common_dot_leotest__pb2.message_schedule_job.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_schedule_job_response.FromString,
                )
        self.get_job_by_id = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_job_by_id',
                request_serializer=common_dot_leotest__pb2.message_get_job_by_id.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_job_by_id_response.FromString,
                )
        self.get_jobs_by_userid = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_jobs_by_userid',
                request_serializer=common_dot_leotest__pb2.message_get_jobs_by_userid.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_jobs_by_userid_response.FromString,
                )
        self.get_jobs_by_nodeid = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_jobs_by_nodeid',
                request_serializer=common_dot_leotest__pb2.message_get_jobs_by_nodeid.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_jobs_by_nodeid_response.FromString,
                )
        self.reschedule_job_nearest = channel.unary_unary(
                '/unary.LeotestOrchestrator/reschedule_job_nearest',
                request_serializer=common_dot_leotest__pb2.message_reschedule_job.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_reschedule_job_response.FromString,
                )
        self.modify_job = channel.unary_unary(
                '/unary.LeotestOrchestrator/modify_job',
                request_serializer=common_dot_leotest__pb2.message_modify_job.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_modify_job_response.FromString,
                )
        self.delete_job_by_id = channel.unary_unary(
                '/unary.LeotestOrchestrator/delete_job_by_id',
                request_serializer=common_dot_leotest__pb2.message_delete_job_by_id.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_delete_job_by_id_response.FromString,
                )
        self.delete_jobs_by_nodeid = channel.unary_unary(
                '/unary.LeotestOrchestrator/delete_jobs_by_nodeid',
                request_serializer=common_dot_leotest__pb2.message_delete_jobs_by_nodeid.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_delete_jobs_by_nodeid_response.FromString,
                )
        self.update_run = channel.unary_unary(
                '/unary.LeotestOrchestrator/update_run',
                request_serializer=common_dot_leotest__pb2.message_update_run.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_update_run_response.FromString,
                )
        self.get_runs = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_runs',
                request_serializer=common_dot_leotest__pb2.message_get_runs.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_runs_response.FromString,
                )
        self.get_scheduled_runs = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_scheduled_runs',
                request_serializer=common_dot_leotest__pb2.message_get_scheduled_runs.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_scheduled_runs_response.FromString,
                )
        self.register_node = channel.unary_unary(
                '/unary.LeotestOrchestrator/register_node',
                request_serializer=common_dot_leotest__pb2.message_register_node.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_register_node_response.FromString,
                )
        self.get_nodes = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_nodes',
                request_serializer=common_dot_leotest__pb2.message_get_nodes.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_nodes_response.FromString,
                )
        self.update_node = channel.unary_unary(
                '/unary.LeotestOrchestrator/update_node',
                request_serializer=common_dot_leotest__pb2.message_update_node.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_update_node_response.FromString,
                )
        self.delete_node = channel.unary_unary(
                '/unary.LeotestOrchestrator/delete_node',
                request_serializer=common_dot_leotest__pb2.message_delete_node.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_delete_node_response.FromString,
                )
        self.set_scavenger_status = channel.unary_unary(
                '/unary.LeotestOrchestrator/set_scavenger_status',
                request_serializer=common_dot_leotest__pb2.message_set_scavenger_status.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_set_scavenger_status_response.FromString,
                )
        self.get_scavenger_status = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_scavenger_status',
                request_serializer=common_dot_leotest__pb2.message_get_scavenger_status.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_scavenger_status_response.FromString,
                )
        self.schedule_task = channel.unary_unary(
                '/unary.LeotestOrchestrator/schedule_task',
                request_serializer=common_dot_leotest__pb2.message_schedule_task.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_schedule_task_response.FromString,
                )
        self.get_tasks = channel.unary_unary(
                '/unary.LeotestOrchestrator/get_tasks',
                request_serializer=common_dot_leotest__pb2.message_get_tasks.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_get_tasks_response.FromString,
                )
        self.update_task = channel.unary_unary(
                '/unary.LeotestOrchestrator/update_task',
                request_serializer=common_dot_leotest__pb2.message_update_task.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_update_task_response.FromString,
                )
        self.kernel_access = channel.unary_unary(
                '/unary.LeotestOrchestrator/kernel_access',
                request_serializer=common_dot_leotest__pb2.message_kernel_access.SerializeToString,
                response_deserializer=common_dot_leotest__pb2.message_kernel_access_response.FromString,
                )


class LeotestOrchestratorServicer(object):
    """The main gRPC service that runs in the orchestrator. 
    """

    def report_heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_global_config(self, request, context):
        """global settings 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_global_config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register_user(self, request, context):
        """user register/get/modify/remove 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modify_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_job(self, request, context):
        """job allocate/modify/get/delete 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_job_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_jobs_by_userid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_jobs_by_nodeid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reschedule_job_nearest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modify_job(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_job_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_jobs_by_nodeid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_runs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_scheduled_runs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register_node(self, request, context):
        """node registeration 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_nodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_scavenger_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_scavenger_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_task(self, request, context):
        """task management 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_tasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def kernel_access(self, request, context):
        """kernel services 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeotestOrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'report_heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.report_heartbeat,
                    request_deserializer=common_dot_leotest__pb2.message_heartbeat.FromString,
                    response_serializer=common_dot_leotest__pb2.message_heartbeat_response.SerializeToString,
            ),
            'update_global_config': grpc.unary_unary_rpc_method_handler(
                    servicer.update_global_config,
                    request_deserializer=common_dot_leotest__pb2.message_update_global_config.FromString,
                    response_serializer=common_dot_leotest__pb2.message_update_global_config_response.SerializeToString,
            ),
            'get_global_config': grpc.unary_unary_rpc_method_handler(
                    servicer.get_global_config,
                    request_deserializer=common_dot_leotest__pb2.message_get_global_config.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_global_config_response.SerializeToString,
            ),
            'register_user': grpc.unary_unary_rpc_method_handler(
                    servicer.register_user,
                    request_deserializer=common_dot_leotest__pb2.message_register_user.FromString,
                    response_serializer=common_dot_leotest__pb2.message_register_user_response.SerializeToString,
            ),
            'get_user': grpc.unary_unary_rpc_method_handler(
                    servicer.get_user,
                    request_deserializer=common_dot_leotest__pb2.message_get_user.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_user_response.SerializeToString,
            ),
            'modify_user': grpc.unary_unary_rpc_method_handler(
                    servicer.modify_user,
                    request_deserializer=common_dot_leotest__pb2.message_modify_user.FromString,
                    response_serializer=common_dot_leotest__pb2.message_modify_user_response.SerializeToString,
            ),
            'delete_user': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_user,
                    request_deserializer=common_dot_leotest__pb2.message_delete_user.FromString,
                    response_serializer=common_dot_leotest__pb2.message_delete_user_response.SerializeToString,
            ),
            'schedule_job': grpc.unary_unary_rpc_method_handler(
                    servicer.schedule_job,
                    request_deserializer=common_dot_leotest__pb2.message_schedule_job.FromString,
                    response_serializer=common_dot_leotest__pb2.message_schedule_job_response.SerializeToString,
            ),
            'get_job_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_job_by_id,
                    request_deserializer=common_dot_leotest__pb2.message_get_job_by_id.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_job_by_id_response.SerializeToString,
            ),
            'get_jobs_by_userid': grpc.unary_unary_rpc_method_handler(
                    servicer.get_jobs_by_userid,
                    request_deserializer=common_dot_leotest__pb2.message_get_jobs_by_userid.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_jobs_by_userid_response.SerializeToString,
            ),
            'get_jobs_by_nodeid': grpc.unary_unary_rpc_method_handler(
                    servicer.get_jobs_by_nodeid,
                    request_deserializer=common_dot_leotest__pb2.message_get_jobs_by_nodeid.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_jobs_by_nodeid_response.SerializeToString,
            ),
            'reschedule_job_nearest': grpc.unary_unary_rpc_method_handler(
                    servicer.reschedule_job_nearest,
                    request_deserializer=common_dot_leotest__pb2.message_reschedule_job.FromString,
                    response_serializer=common_dot_leotest__pb2.message_reschedule_job_response.SerializeToString,
            ),
            'modify_job': grpc.unary_unary_rpc_method_handler(
                    servicer.modify_job,
                    request_deserializer=common_dot_leotest__pb2.message_modify_job.FromString,
                    response_serializer=common_dot_leotest__pb2.message_modify_job_response.SerializeToString,
            ),
            'delete_job_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_job_by_id,
                    request_deserializer=common_dot_leotest__pb2.message_delete_job_by_id.FromString,
                    response_serializer=common_dot_leotest__pb2.message_delete_job_by_id_response.SerializeToString,
            ),
            'delete_jobs_by_nodeid': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_jobs_by_nodeid,
                    request_deserializer=common_dot_leotest__pb2.message_delete_jobs_by_nodeid.FromString,
                    response_serializer=common_dot_leotest__pb2.message_delete_jobs_by_nodeid_response.SerializeToString,
            ),
            'update_run': grpc.unary_unary_rpc_method_handler(
                    servicer.update_run,
                    request_deserializer=common_dot_leotest__pb2.message_update_run.FromString,
                    response_serializer=common_dot_leotest__pb2.message_update_run_response.SerializeToString,
            ),
            'get_runs': grpc.unary_unary_rpc_method_handler(
                    servicer.get_runs,
                    request_deserializer=common_dot_leotest__pb2.message_get_runs.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_runs_response.SerializeToString,
            ),
            'get_scheduled_runs': grpc.unary_unary_rpc_method_handler(
                    servicer.get_scheduled_runs,
                    request_deserializer=common_dot_leotest__pb2.message_get_scheduled_runs.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_scheduled_runs_response.SerializeToString,
            ),
            'register_node': grpc.unary_unary_rpc_method_handler(
                    servicer.register_node,
                    request_deserializer=common_dot_leotest__pb2.message_register_node.FromString,
                    response_serializer=common_dot_leotest__pb2.message_register_node_response.SerializeToString,
            ),
            'get_nodes': grpc.unary_unary_rpc_method_handler(
                    servicer.get_nodes,
                    request_deserializer=common_dot_leotest__pb2.message_get_nodes.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_nodes_response.SerializeToString,
            ),
            'update_node': grpc.unary_unary_rpc_method_handler(
                    servicer.update_node,
                    request_deserializer=common_dot_leotest__pb2.message_update_node.FromString,
                    response_serializer=common_dot_leotest__pb2.message_update_node_response.SerializeToString,
            ),
            'delete_node': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_node,
                    request_deserializer=common_dot_leotest__pb2.message_delete_node.FromString,
                    response_serializer=common_dot_leotest__pb2.message_delete_node_response.SerializeToString,
            ),
            'set_scavenger_status': grpc.unary_unary_rpc_method_handler(
                    servicer.set_scavenger_status,
                    request_deserializer=common_dot_leotest__pb2.message_set_scavenger_status.FromString,
                    response_serializer=common_dot_leotest__pb2.message_set_scavenger_status_response.SerializeToString,
            ),
            'get_scavenger_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_scavenger_status,
                    request_deserializer=common_dot_leotest__pb2.message_get_scavenger_status.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_scavenger_status_response.SerializeToString,
            ),
            'schedule_task': grpc.unary_unary_rpc_method_handler(
                    servicer.schedule_task,
                    request_deserializer=common_dot_leotest__pb2.message_schedule_task.FromString,
                    response_serializer=common_dot_leotest__pb2.message_schedule_task_response.SerializeToString,
            ),
            'get_tasks': grpc.unary_unary_rpc_method_handler(
                    servicer.get_tasks,
                    request_deserializer=common_dot_leotest__pb2.message_get_tasks.FromString,
                    response_serializer=common_dot_leotest__pb2.message_get_tasks_response.SerializeToString,
            ),
            'update_task': grpc.unary_unary_rpc_method_handler(
                    servicer.update_task,
                    request_deserializer=common_dot_leotest__pb2.message_update_task.FromString,
                    response_serializer=common_dot_leotest__pb2.message_update_task_response.SerializeToString,
            ),
            'kernel_access': grpc.unary_unary_rpc_method_handler(
                    servicer.kernel_access,
                    request_deserializer=common_dot_leotest__pb2.message_kernel_access.FromString,
                    response_serializer=common_dot_leotest__pb2.message_kernel_access_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'unary.LeotestOrchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeotestOrchestrator(object):
    """The main gRPC service that runs in the orchestrator. 
    """

    @staticmethod
    def report_heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/report_heartbeat',
            common_dot_leotest__pb2.message_heartbeat.SerializeToString,
            common_dot_leotest__pb2.message_heartbeat_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_global_config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/update_global_config',
            common_dot_leotest__pb2.message_update_global_config.SerializeToString,
            common_dot_leotest__pb2.message_update_global_config_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_global_config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_global_config',
            common_dot_leotest__pb2.message_get_global_config.SerializeToString,
            common_dot_leotest__pb2.message_get_global_config_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/register_user',
            common_dot_leotest__pb2.message_register_user.SerializeToString,
            common_dot_leotest__pb2.message_register_user_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_user',
            common_dot_leotest__pb2.message_get_user.SerializeToString,
            common_dot_leotest__pb2.message_get_user_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modify_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/modify_user',
            common_dot_leotest__pb2.message_modify_user.SerializeToString,
            common_dot_leotest__pb2.message_modify_user_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/delete_user',
            common_dot_leotest__pb2.message_delete_user.SerializeToString,
            common_dot_leotest__pb2.message_delete_user_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def schedule_job(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/schedule_job',
            common_dot_leotest__pb2.message_schedule_job.SerializeToString,
            common_dot_leotest__pb2.message_schedule_job_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_job_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_job_by_id',
            common_dot_leotest__pb2.message_get_job_by_id.SerializeToString,
            common_dot_leotest__pb2.message_get_job_by_id_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_jobs_by_userid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_jobs_by_userid',
            common_dot_leotest__pb2.message_get_jobs_by_userid.SerializeToString,
            common_dot_leotest__pb2.message_get_jobs_by_userid_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_jobs_by_nodeid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_jobs_by_nodeid',
            common_dot_leotest__pb2.message_get_jobs_by_nodeid.SerializeToString,
            common_dot_leotest__pb2.message_get_jobs_by_nodeid_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reschedule_job_nearest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/reschedule_job_nearest',
            common_dot_leotest__pb2.message_reschedule_job.SerializeToString,
            common_dot_leotest__pb2.message_reschedule_job_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modify_job(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/modify_job',
            common_dot_leotest__pb2.message_modify_job.SerializeToString,
            common_dot_leotest__pb2.message_modify_job_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_job_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/delete_job_by_id',
            common_dot_leotest__pb2.message_delete_job_by_id.SerializeToString,
            common_dot_leotest__pb2.message_delete_job_by_id_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_jobs_by_nodeid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/delete_jobs_by_nodeid',
            common_dot_leotest__pb2.message_delete_jobs_by_nodeid.SerializeToString,
            common_dot_leotest__pb2.message_delete_jobs_by_nodeid_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/update_run',
            common_dot_leotest__pb2.message_update_run.SerializeToString,
            common_dot_leotest__pb2.message_update_run_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_runs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_runs',
            common_dot_leotest__pb2.message_get_runs.SerializeToString,
            common_dot_leotest__pb2.message_get_runs_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_scheduled_runs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_scheduled_runs',
            common_dot_leotest__pb2.message_get_scheduled_runs.SerializeToString,
            common_dot_leotest__pb2.message_get_scheduled_runs_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/register_node',
            common_dot_leotest__pb2.message_register_node.SerializeToString,
            common_dot_leotest__pb2.message_register_node_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_nodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_nodes',
            common_dot_leotest__pb2.message_get_nodes.SerializeToString,
            common_dot_leotest__pb2.message_get_nodes_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/update_node',
            common_dot_leotest__pb2.message_update_node.SerializeToString,
            common_dot_leotest__pb2.message_update_node_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/delete_node',
            common_dot_leotest__pb2.message_delete_node.SerializeToString,
            common_dot_leotest__pb2.message_delete_node_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_scavenger_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/set_scavenger_status',
            common_dot_leotest__pb2.message_set_scavenger_status.SerializeToString,
            common_dot_leotest__pb2.message_set_scavenger_status_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_scavenger_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_scavenger_status',
            common_dot_leotest__pb2.message_get_scavenger_status.SerializeToString,
            common_dot_leotest__pb2.message_get_scavenger_status_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def schedule_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/schedule_task',
            common_dot_leotest__pb2.message_schedule_task.SerializeToString,
            common_dot_leotest__pb2.message_schedule_task_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_tasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/get_tasks',
            common_dot_leotest__pb2.message_get_tasks.SerializeToString,
            common_dot_leotest__pb2.message_get_tasks_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/update_task',
            common_dot_leotest__pb2.message_update_task.SerializeToString,
            common_dot_leotest__pb2.message_update_task_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def kernel_access(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/unary.LeotestOrchestrator/kernel_access',
            common_dot_leotest__pb2.message_kernel_access.SerializeToString,
            common_dot_leotest__pb2.message_kernel_access_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
